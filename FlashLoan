// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract FlashLoan {
    IERC20 public token;
    address public lender;

    constructor(address _token) {
        token = IERC20(_token);
        lender = msg.sender;
    }

    function flashLoan(uint256 _amount) public {
        uint256 balanceBefore = token.balanceOf(address(this));
        require(balanceBefore >= _amount, "Insufficient balance");

        token.transfer(msg.sender, _amount);

        (bool success, ) = msg.sender.call(abi.encodeWithSignature("execute()"));
        require(success, "External call failed");

        uint256 balanceAfter = token.balanceOf(address(this));
        require(balanceAfter >= balanceBefore, "Loan not repaid");
    }
}
